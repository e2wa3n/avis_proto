[1mdiff --git a/auth.js b/auth.js[m
[1mindex 7bc0940..a7272c2 100644[m
[1m--- a/auth.js[m
[1m+++ b/auth.js[m
[36m@@ -4,31 +4,31 @@[m [mconst sqlite3 = require('sqlite3').verbose();[m
 const bcrypt  = require('bcrypt');[m
 const path    = require('path');[m
 [m
[31m-const DB_PATH = path.join(__dirname, 'users.db');[m
[32m+[m[32mconst db_path = path.join(__dirname, 'users.db');[m
 [m
[31m-const db = new sqlite3.Database(DB_PATH, (err) => {[m
[32m+[m[32mconst db = new sqlite3.Database(db_path, (err) => {[m
     if (err) {[m
[31m-        console.error('Could not open users.db', err.message);[m
[32m+[m[32m        console.error('could not open users.db', err.message);[m
     } else {[m
[31m-        console.log('Opened users.db');[m
[32m+[m[32m        console.log('opened users.db');[m
     }[m
 });[m
 [m
 db.run([m
[31m-    `CREATE TABLE IF NOT EXISTS accounts ([m
[31m-        id INTEGER PRIMARY KEY AUTOINCREMENT,[m
[31m-        username TEXT UNIQUE NOT NULL,[m
[31m-        email TEXT UNIQUE NOT NULL,[m
[31m-        password_hash TEXT NOT NULL,[m
[31m-        date_created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP[m
[32m+[m[32m    `create table if not exists accounts ([m
[32m+[m[32m        id integer primary key autoincrement,[m
[32m+[m[32m        username text unique not null,[m
[32m+[m[32m        email text unique not null,[m
[32m+[m[32m        password_hash text not null,[m
[32m+[m[32m        date_created datetime not null default current_timestamp[m
     );`,[m
     (err) => {[m
[31m-        if (err) console.error('Error creating accounts table:', err.message);[m
[31m-        else console.log('Accounts table ready');[m
[32m+[m[32m        if (err) console.error('error creating accounts table:', err.message);[m
[32m+[m[32m        else console.log('accounts table ready');[m
     }[m
 );[m
 [m
[31m-function parseFormBody(req) {[m
[32m+[m[32mfunction parseformbody(req) {[m
     return new Promise((resolve, reject) => {[m
         let body = '';[m
         req.on('data', (chunk) => {[m
[36m@@ -36,7 +36,7 @@[m [mfunction parseFormBody(req) {[m
         });[m
         req.on('end', () => {[m
 [m
[31m-            const params = new URLSearchParams(body);[m
[32m+[m[32m            const params = new urlsearchparams(body);[m
             resolve({[m
                 username: params.get('username') || '',[m
                 email:    params.get('email')    || '',[m
[36m@@ -49,70 +49,70 @@[m [mfunction parseFormBody(req) {[m
 [m
 async function handleCreateAccount(req, res) {[m
     try {[m
[31m-        const { username, email, password } = await parseFormBody(req);[m
[32m+[m[32m        const { username, email, password } = await parseformbody(req);[m
         if (!username || !password) {[m
[31m-            res.writeHead(400, {'Content-Type': 'application/json' });[m
[32m+[m[32m            res.writeHead(400, {'content-type': 'application/json' });[m
             return res.end([m
[31m-                JSON.stringify({[m
[32m+[m[32m                json.Stringify({[m
                     success: false,[m
[31m-                    message: 'Username and password are required'[m
[32m+[m[32m                    message: 'username and password are required'[m
                 })[m
             );[m
         }[m
 [m
         if (!email) {[m
[31m-            res.writeHead(400, {'Content-Type':'application/json'});[m
[31m-            return res.end(JSON.stringify({[m
[32m+[m[32m            res.writeHead(400, {'content-type':'application/json'});[m
[32m+[m[32m            return res.end(json.Stringify({[m
                 success: false,[m
[31m-                message: 'Email is required'[m
[32m+[m[32m                message: 'email is required'[m
             }));[m
         }[m
 [m
[31m-        const saltRounds = 10;[m
[31m-        const passwordHash = await bcrypt.hash(password, saltRounds);[m
[32m+[m[32m        const saltrounds = 10;[m
[32m+[m[32m        const passwordhash = await bcrypt.hash(password, saltrounds);[m
 [m
         const stmt = db.prepare([m
[31m-            `INSERT INTO accounts (username, email, password_hash) [m
[31m-                VALUES (?, ?, ?);`[m
[32m+[m[32m            `insert into accounts (username, email, password_hash)[m[41m [m
[32m+[m[32m                values (?, ?, ?);`[m
         );[m
 [m
[31m-        stmt.run(username, email, passwordHash, function (err) {[m
[32m+[m[32m        stmt.run(username, email, passwordhash, function (err) {[m
             if (err) {[m
[31m-                if (err.code === 'SQLITE_CONSTRAINT') {[m
[32m+[m[32m                if (err.code === 'sqlite_constraint') {[m
                     const msg = /accounts\.username/.test(err.message)[m
[31m-                        ? 'That username is already taken'[m
[32m+[m[32m                        ? 'that username is already taken'[m
                         : /accounts\.email/.test(err.message)[m
[31m-                            ? 'That email is already registered'[m
[31m-                            : 'That username or email is already in use';[m
[31m-                    res.writeHead(409, { 'Content-Type': 'application/json' });[m
[31m-                    return res.end(JSON.stringify({[m
[32m+[m[32m                            ? 'that email is already registered'[m
[32m+[m[32m                            : 'that username or email is already in use';[m
[32m+[m[32m                    res.writeHead(409, { 'content-type': 'application/json' });[m
[32m+[m[32m                    return res.end(json.Stringify({[m
                         success: false,[m
                         message: msg[m
                     }));[m
                 }[m
 [m
 [m
[31m-                console.error('DB error on INSERT:', err.message);[m
[31m-                res.writeHead(500, {'Content-Type': 'application/json' });[m
[32m+[m[32m                console.error('db error on insert:', err.message);[m
[32m+[m[32m                res.writeHead(500, {'content-type': 'application/json' });[m
                 return res.end([m
[31m-                    JSON.stringify({[m
[32m+[m[32m                    json.Stringify({[m
                         success: false,[m
[31m-                        message: 'Internal Server Error'[m
[32m+[m[32m                        message: 'internal server error'[m
                     })[m
                 );[m
             }[m
 [m
[31m-            res.writeHead(200, { 'Content-Type': 'application/json' });[m
[31m-            return res.end(JSON.stringify({ success: true }));[m
[32m+[m[32m            res.writeHead(200, { 'content-type': 'application/json' });[m
[32m+[m[32m            return res.end(json.Stringify({ success: true }));[m
         });[m
         stmt.finalize();[m
     }   catch (err) {[m
[31m-        console.error('Error in handleCreateAccount:', err);[m
[31m-        res.writeHead(500, { 'Content-Type': 'application/json' });[m
[32m+[m[32m        console.error('error in handlecreateaccount:', err);[m
[32m+[m[32m        res.writeHead(500, { 'content-type': 'application/json' });[m
         return res.end([m
[31m-            JSON.stringify({[m
[32m+[m[32m            json.Stringify({[m
                 success: false,[m
[31m-                message: 'Internal Server Error'[m
[32m+[m[32m                message: 'internal server error'[m
             })[m
         );[m
     }[m
[36m@@ -120,42 +120,42 @@[m [masync function handleCreateAccount(req, res) {[m
 [m
 async function handleSignIn(req, res) {[m
     try {[m
[31m-        const { username, password } = await parseFormBody(req);[m
[32m+[m[32m        const { username, password } = await parseformbody(req);[m
         if (!username || !password) {[m
[31m-            res.writeHead(400, {'Content-Type': 'application/json' });[m
[32m+[m[32m            res.writeHead(400, {'content-type': 'application/json' });[m
             return res.end([m
[31m-                JSON.stringify({[m
[32m+[m[32m                json.Stringify({[m
                     success: false,[m
[31m-                    message: 'Username and password are required'[m
[32m+[m[32m                    message: 'username and password are required'[m
                 })[m
             );[m
         }[m
 [m
         db.get([m
[31m-            `SELECT id AS account_id,[m
[32m+[m[32m            `select id as account_id,[m
                 password_hash,[m
                 date_created[m
[31m-                FROM accounts[m
[31m-                WHERE username = ?;`,[m
[32m+[m[32m                from accounts[m
[32m+[m[32m                where username = ?;`,[m
             [username],[m
             async (err, row) => {[m
                 if (err) {[m
[31m-                    console.error('DB error on SELECT:', err.message);[m
[31m-                    res.writeHead(500, { 'Content-Type': 'application/json' });[m
[32m+[m[32m                    console.error('db error on select:', err.message);[m
[32m+[m[32m                    res.writeHead(500, { 'content-type': 'application/json' });[m
                     return res.end([m
[31m-                        JSON.stringify({[m
[32m+[m[32m                        json.Stringify({[m
                             success: false,[m
[31m-                            message: 'Internal Server Error'[m
[32m+[m[32m                            message: 'internal server error'[m
                         })[m
                     );[m
                 }[m
 [m
                 if (!row) {[m
[31m-                    res.writeHead(401, { 'Content-Type': 'application/json' });[m
[32m+[m[32m                    res.Writehead(401, { 'content-type': 'application/json' });[m
                     return res.end([m
[31m-                        JSON.stringify({[m
[32m+[m[32m                        json.Stringify({[m
                         success: false,[m
[31m-                        message: 'Invalid username or password'[m
[32m+[m[32m                        message: 'invalid username or password'[m
                        })[m
                     );[m
                 }[m
[36m@@ -164,17 +164,17 @@[m [masync function handleSignIn(req, res) {[m
 [m
                 const match = await bcrypt.compare(password, row.password_hash);[m
                 if (!match) {[m
[31m-                    res.writeHead(401, { 'Content-Type': 'application/json' });[m
[32m+[m[32m                    res.writeHead(401, { 'content-type': 'application/json' });[m
                     return res.end([m
[31m-                        JSON.stringify({[m
[32m+[m[32m                        json.Stringify({[m
                             success: false,[m
[31m-                            message: 'Invalid username or password'[m
[32m+[m[32m                            message: 'invalid username or password'[m
                         })[m
                     );[m
                 }[m
 [m
[31m-                res.writeHead(200, { 'Content-Type': 'application/json' });[m
[31m-                return res.end(JSON.stringify({[m
[32m+[m[32m                res.writeHead(200, { 'content-type': 'application/json' });[m
[32m+[m[32m                return res.end(json.Stringify({[m
                     success: true,[m
                     username: username,[m
                     account_id: row.account_id,[m
[36m@@ -183,12 +183,12 @@[m [masync function handleSignIn(req, res) {[m
             }[m
         );[m
     }   catch (err) {[m
[31m-        console.error('Error in handleSignIn', err);[m
[31m-        res.writeHead(500, { 'Content-Type': 'application/json' });[m
[32m+[m[32m        console.error('error in handlesignin', err);[m
[32m+[m[32m        res.writeHead(500, { 'content-type': 'application/json' });[m
         res.end([m
[31m-            JSON.stringify({[m
[32m+[m[32m            json.Stringify({[m
                 success: false,[m
[31m-                message: 'Internal Server Error'[m
[32m+[m[32m                message: 'internal server error'[m
             })[m
         );[m
     }[m
